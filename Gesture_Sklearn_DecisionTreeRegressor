{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled71.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNfmmxBgy5agqTNV8dfSQb+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mingun0112/GestureClassification/blob/main/Gesture_Sklearn_DecisionTreeRegressor\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "W7QXoWbHaNcE"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn\n",
        "from sklearn.tree import DecisionTreeRegressor"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip '/content/hand_gesture_data.zip'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c0ByC1mahU--",
        "outputId": "775a9176-554e-419b-d28f-5c941a711d1b"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/hand_gesture_data.zip\n",
            "  inflating: sample_submission.csv   \n",
            "  inflating: test.csv                \n",
            "  inflating: train.csv               \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train=pd.read_csv('/content/train.csv')\n",
        "test=pd.read_csv('/content/test.csv')"
      ],
      "metadata": {
        "id": "cCjqu7V5hx-9"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jAuEY6qoiFio",
        "outputId": "dc574040-7ae6-430e-a002-75d121aa097f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id           0\n",
              "sensor_1     0\n",
              "sensor_2     0\n",
              "sensor_3     0\n",
              "sensor_4     0\n",
              "sensor_5     0\n",
              "sensor_6     0\n",
              "sensor_7     0\n",
              "sensor_8     0\n",
              "sensor_9     0\n",
              "sensor_10    0\n",
              "sensor_11    0\n",
              "sensor_12    0\n",
              "sensor_13    0\n",
              "sensor_14    0\n",
              "sensor_15    0\n",
              "sensor_16    0\n",
              "sensor_17    0\n",
              "sensor_18    0\n",
              "sensor_19    0\n",
              "sensor_20    0\n",
              "sensor_21    0\n",
              "sensor_22    0\n",
              "sensor_23    0\n",
              "sensor_24    0\n",
              "sensor_25    0\n",
              "sensor_26    0\n",
              "sensor_27    0\n",
              "sensor_28    0\n",
              "sensor_29    0\n",
              "sensor_30    0\n",
              "sensor_31    0\n",
              "sensor_32    0\n",
              "target       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kWoUKUe6iAou",
        "outputId": "20071476-297d-4a9a-a9c5-da5a50fc363e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2335 entries, 0 to 2334\n",
            "Data columns (total 34 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   id         2335 non-null   int64  \n",
            " 1   sensor_1   2335 non-null   float64\n",
            " 2   sensor_2   2335 non-null   float64\n",
            " 3   sensor_3   2335 non-null   float64\n",
            " 4   sensor_4   2335 non-null   float64\n",
            " 5   sensor_5   2335 non-null   float64\n",
            " 6   sensor_6   2335 non-null   float64\n",
            " 7   sensor_7   2335 non-null   float64\n",
            " 8   sensor_8   2335 non-null   float64\n",
            " 9   sensor_9   2335 non-null   float64\n",
            " 10  sensor_10  2335 non-null   float64\n",
            " 11  sensor_11  2335 non-null   float64\n",
            " 12  sensor_12  2335 non-null   float64\n",
            " 13  sensor_13  2335 non-null   float64\n",
            " 14  sensor_14  2335 non-null   float64\n",
            " 15  sensor_15  2335 non-null   float64\n",
            " 16  sensor_16  2335 non-null   float64\n",
            " 17  sensor_17  2335 non-null   float64\n",
            " 18  sensor_18  2335 non-null   float64\n",
            " 19  sensor_19  2335 non-null   float64\n",
            " 20  sensor_20  2335 non-null   float64\n",
            " 21  sensor_21  2335 non-null   float64\n",
            " 22  sensor_22  2335 non-null   float64\n",
            " 23  sensor_23  2335 non-null   float64\n",
            " 24  sensor_24  2335 non-null   float64\n",
            " 25  sensor_25  2335 non-null   float64\n",
            " 26  sensor_26  2335 non-null   float64\n",
            " 27  sensor_27  2335 non-null   float64\n",
            " 28  sensor_28  2335 non-null   float64\n",
            " 29  sensor_29  2335 non-null   float64\n",
            " 30  sensor_30  2335 non-null   float64\n",
            " 31  sensor_31  2335 non-null   float64\n",
            " 32  sensor_32  2335 non-null   float64\n",
            " 33  target     2335 non-null   int64  \n",
            "dtypes: float64(32), int64(2)\n",
            "memory usage: 620.4 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train=train.drop('target',axis=1)\n",
        "Y_train=train['target']"
      ],
      "metadata": {
        "id": "rAJadBHTiPAi"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model=DecisionTreeRegressor()\n",
        "model.fit(X_train,Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "POw6Q85vjHJw",
        "outputId": "aa32270e-c8e1-4e89-a1b7-fea1c9a2dd89"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor()"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=np.array(model.predict(test),int)\n",
        "pred[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "czEvpPudjk5e",
        "outputId": "ae3c2999-02a1-4aba-cdf6-6d06a7d4aad5"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 0, 1, 3, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result=pd.read_csv('/content/sample_submission.csv')"
      ],
      "metadata": {
        "id": "O43Iv2u3kbwt"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result['target']=pred\n"
      ],
      "metadata": {
        "id": "w1YaHhdmknuZ"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tu8sctp7qC23",
        "outputId": "97fee5fe-027a-4320-a9b5-2a0b56b68c85"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        id  target\n",
            "0        1       2\n",
            "1        2       0\n",
            "2        3       1\n",
            "3        4       3\n",
            "4        5       3\n",
            "...    ...     ...\n",
            "9338  9339       1\n",
            "9339  9340       3\n",
            "9340  9341       3\n",
            "9341  9342       2\n",
            "9342  9343       3\n",
            "\n",
            "[9343 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result.to_csv('EDA_submission.csv',index=False)"
      ],
      "metadata": {
        "id": "taXcGLG7k2wi"
      },
      "execution_count": 13,
      "outputs": []
    }
  ]
}